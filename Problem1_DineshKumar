class Solution {
public:
    int search(vector<int>& nums, int target) {
        int low = 0; 
        int high = nums.size() -1; 

        while (low <= high) {
            int mid = low + (high - low ) / 2; 

            if (nums[mid] == target) {
                return mid; 
            }
            else if (nums[low] <= nums[mid]) { //left part is sorted
                if (target >= nums[low] && target < nums[mid]) { // target is on left
                    high = mid - 1; 
                }
                else {
                    low = mid + 1; 
                }
            }
            else {  // right part is sorted
                if (target <= nums[high] && target > nums[mid]) {
                    low = mid + 1; 
                }
                else {
                    high = mid - 1; 
                }
            }
        }
        return -1;
        
        /*
            Time and Space Complexity Analysis
            Time: O(log N) where N is the size of input array
            Space: O(1)
        */
    }
};
